generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model User {
  id               String              @id @default(uuid())
  email            String              @unique
  password         String
  firstName        String?
  lastName         String?
  phone            String?
  companyName      String?
  jobTitle         String?
  companyIndustry  String?
  companySize      String?
  role             String?             @default("MEMBER") // ADMIN, MEMBER, USER
  status           String?             @default("PENDING")
  isEmailVerified  Boolean             @default(false)
  isPhoneVerified  Boolean             @default(false)
  planType         String?             @default("FREE") // FREE, MEMBER, ADMIN
  subscriptionStatus String?           @default("TRIAL") // ACTIVE, EXPIRED, CANCELLED, TRIAL, PENDING

  // Security Questions (new fields)
  firstSchoolName  String?
  petName          String?
  birthPlace       String?
  elderBrotherName String?
  grandfatherName  String?
  motherName       String?
  
  // PIN Code (new field)
  pinCode          String?
  
  // Social Auth fields (new)
  googleId         String?
  facebookId       String?
  authProvider     String?             // LOCAL, GOOGLE, FACEBOOK

  verificationCode String?
  resetToken       String?
  resetTokenExpiry DateTime?
  lastLogin        DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  
   payments         Payment[]
  accounts         Account[]
  cards            Card[]
  investments      Investment[]
  invoices         Invoice[]
  loans            Loan[]
  transactions     Transaction[]
  
  userSubscriptions UserSubscription[]
  trialUsages      TrialUsage[]
  subscriptionActivityLogs SubscriptionActivityLog[]
  serviceRequests  ServiceRequest[]

  @@map("users")
}

// NEW SERVICE MODEL
model Service {
  id              String    @id @default(uuid())
  name            String    @unique // Internal name (e.g., gs1_audit)
  displayName     String    // User-friendly name (e.g., GS1 Compliance Audit)
  description     String
  serviceType     String    // service, integration, audit, consultation, feature
  category        String?   // compliance, migration, software, api, etc.
  features        String?   // JSON string of features array
  metadata        String?   // JSON string for additional service data
  icon            String?   // Service icon URL or path
  isActive        Boolean   @default(true)
  sortOrder       Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // Soft delete
  createdBy       String?
  updatedBy       String?
  
  // Relationships
  planServices    PlanService[]
  serviceRequests ServiceRequest[]
  
  @@map("services")
}

// JUNCTION TABLE FOR PLAN-SERVICE MANY-TO-MANY RELATIONSHIP
model PlanService {
  id          String    @id @default(uuid())
  planId      String
  serviceId   String
  isIncluded  Boolean   @default(true) // Whether service is included or add-on
  maxUsage    Int?      // Max usage limit for this service in this plan
  metadata    String?   // JSON for service-specific plan settings
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  plan        SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@unique([planId, serviceId])
  @@map("plan_services")
}

// SERVICE REQUESTS FOR USERS TO REQUEST ADDITIONAL SERVICES
model ServiceRequest {
  id              String    @id @default(uuid())
  userId          String
  subscriptionId  String
  serviceId       String
  status          String    @default("PENDING") // PENDING, APPROVED, REJECTED, CANCELLED
  reason          String?   // User's reason for requesting
  adminNotes      String?   // Admin notes/comments
  rejectionReason String?   // Reason for rejection
  
  requestedAt     DateTime  @default(now())
  reviewedAt      DateTime?
  approvedBy      String?   // Admin user ID who approved/rejected
  rejectedBy      String?   // Admin user ID who rejected
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service         Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@map("service_requests")
}

model SubscriptionPlan {
  id              String    @id @default(uuid())
  name            String
  displayName     String
  type            String    // FREE, MEMBER, ADMIN
  monthlyPrice    Decimal   @db.Decimal(15, 2)
  yearlyPrice     Decimal   @db.Decimal(15, 2)
  currency        String    @default("SAR")
  features        String    // JSON string of features
  trialDays       Int       @default(14)
  maxUsers        Int       @default(1)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  userSubscriptions UserSubscription[]
  planServices    PlanService[] // ADD THIS LINE
  
  @@map("subscription_plans")
}

model UserSubscription {
  id              String    @id @default(uuid())
  userId          String
  planId          String
  billingCycle    String    // MONTHLY, YEARLY
  status          String    @default("ACTIVE") // ACTIVE, TRIAL, EXPIRED, CANCELLED, PENDING_PAYMENT
  startDate       DateTime  @default(now())
  endDate         DateTime
  cancelledAt     DateTime?
  priceAtPurchase Decimal   @db.Decimal(15, 2)
  paymentStatus   String    @default("PENDING") // PENDING, PAID, FAILED
  autoRenewal     Boolean   @default(true)
  metadata        String?   // JSON string for additional data
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            SubscriptionPlan @relation(fields: [planId], references: [id])
  renewalReminders RenewalReminder[]
  subscriptionPayments SubscriptionPayment[]
  payments Payment[]
  serviceRequests ServiceRequest[] // ADD THIS LINE
  
  @@map("user_subscriptions")
}

model TrialUsage {
  id              String    @id @default(uuid())
  userId          String
  email           String
  planType        String    // FREE, MEMBER, ADMIN
  usedAt          DateTime  @default(now())
  ipAddress       String?
  userAgent       String?
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([email, planType])
  @@map("trial_usage")
}

model RenewalReminder {
  id              String    @id @default(uuid())
  subscriptionId  String
  reminderType    String    // SEVEN_DAYS, THREE_DAYS, EXPIRED
  scheduledAt     DateTime
  sentAt          DateTime?
  emailSent       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  subscription    UserSubscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@map("renewal_reminders")
}

model SubscriptionPayment {
  id              String    @id @default(uuid())
  subscriptionId  String
  amount          Decimal   @db.Decimal(15, 2)
  currency        String    @default("SAR")
  status          String    @default("PENDING") // PENDING, PAID, FAILED, REFUNDED
  paymentMethod   String?   // card, bank_transfer, etc.
  stripePaymentId String?   // External payment processor ID
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  subscription    UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@map("subscription_payments")
}

model Payment {
  id             String       @id @default(uuid())
  userId         String
  subscriptionId String
  amount         Decimal      @db.Decimal(15, 2)
  paymentStatus  String       @default("PENDING")
  paymentProof   String?
  paymentMethod     String?  // Visa, Mastercard, etc.
  cardHolderName    String?
  cardLastFour      String?  // Last 4 digits of card
  billingAddress    String?    // Store address as JSON
  declineReason     String?  // Reason for decline if applicable
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Keep the user relation with Cascade (primary relationship)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Change subscription relation to NoAction to break the cycle
  subscription UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("payments")
}

model Subscription {
  id          String    @id @default(uuid())
  name        String
  type        String
  monthlyPrice Decimal  @db.Decimal(15, 2)
  yearlyPrice  Decimal? @db.Decimal(15, 2)
  currency    String    @default("SAR")
  billingCycle String
  features    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("subscriptions")
}

model Account {
  id                      String                  @id @default(uuid())
  userId                  String
  fullName                String
  routingNumber           String
  accountNumber           String                  @unique
  balance                 Decimal                 @default(0) @db.Decimal(15, 2)
  currency                String                  @default("SAR")
  isDefault               Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  accountBalanceHistories AccountBalanceHistory[]
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  receivedTransactions    Transaction[]           @relation("ReceiverAccount")
  sentTransactions        Transaction[]           @relation("SenderAccount")

  @@map("accounts")
}

model Transaction {
  id                String    @id @default(uuid())
  transactionId     String    @unique @default(uuid())
  userId            String
  senderAccountId   String?
  receiverAccountId String?
  cardId            String?
  type              String
  amount            Decimal   @db.Decimal(15, 2)
  fee               Decimal   @default(0) @db.Decimal(15, 2)
  description       String
  category          String?
  status            String    @default("PENDING")
  reference         String?
  metadata          String?
  processedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  card              Card?     @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  receiverAccount   Account?  @relation("ReceiverAccount", fields: [receiverAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  senderAccount     Account?  @relation("SenderAccount", fields: [senderAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Loan {
  id              String        @id @default(uuid())
  userId          String
  loanType        String
  amount          Decimal       @db.Decimal(15, 2)
  remainingAmount Decimal       @db.Decimal(15, 2)
  interestRate    Decimal       @db.Decimal(5, 2)
  duration        Int
  monthlyPayment  Decimal       @db.Decimal(15, 2)
  status          String        @default("PENDING")
  startDate       DateTime?
  endDate         DateTime?
  nextPaymentDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  loanPayments    LoanPayment[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model LoanPayment {
  id              String   @id @default(uuid())
  loanId          String
  amount          Decimal  @db.Decimal(15, 2)
  principalAmount Decimal  @db.Decimal(15, 2)
  interestAmount  Decimal  @db.Decimal(15, 2)
  paymentDate     DateTime
  createdAt       DateTime @default(now())
  loan            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("loan_payments")
}

model Investment {
  id           String    @id @default(uuid())
  userId       String
  name         String
  category     String
  amount       Decimal   @db.Decimal(15, 2)
  currentValue Decimal   @db.Decimal(15, 2)
  returnRate   Decimal   @db.Decimal(5, 2)
  status       String    @default("ACTIVE")
  startDate    DateTime
  maturityDate DateTime?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investments")
}

model Invoice {
  id             String    @id @default(uuid())
  userId         String
  invoiceNumber  String    @unique
  recipientName  String
  recipientEmail String?
  amount         Decimal   @db.Decimal(15, 2)
  description    String?
  status         String    @default("SENT")
  dueDate        DateTime?
  paidAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model AccountBalanceHistory {
  id        String   @id @default(uuid())
  accountId String
  balance   Decimal  @db.Decimal(15, 2)
  date      DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("account_balance_history")
}

model SystemSettings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// Trust Indicators Section
model TrustIndicator {
  id          String    @id @default(uuid())
  companyName String
  logoUrl     String
  websiteUrl  String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("trust_indicators")
}

// FAQ Section
model FAQ {
  id          String    @id @default(uuid())
  question    String
  answer      String    @db.Text
  category    String?   // general, billing, technical, etc.
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("faqs")
}

// Stats Section
model Statistic {
  id          String    @id @default(uuid())
  title       String    // e.g., "120K+"
  description String    // e.g., "Our platform is a trusted choice..."
  icon        String?   // emoji or icon class
  value       String    // the actual number/value
  category    String?   // users, rating, countries, etc.
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("statistics")
}

// App Download Section
model AppDownload {
  id              String    @id @default(uuid())
  title           String    // Main heading
  description     String    @db.Text // Subtitle/description
  androidUrl      String?   // Google Play Store URL
  iosUrl          String?   // App Store URL
  androidLabel    String?   // Button text for Android
  iosLabel        String?   // Button text for iOS
  backgroundImage String?   // Background image URL
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("app_downloads")
}

// Footer Content
model FooterSection {
  id          String        @id @default(uuid())
  sectionName String        // e.g., "Quick Links", "Products", "Company"
  title       String        // Display title
  sortOrder   Int           @default(0)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  footerLinks FooterLink[]
  
  @@map("footer_sections")
}

model FooterLink {
  id            String        @id @default(uuid())
  sectionId     String
  title         String
  url           String
  isExternal    Boolean       @default(false)
  sortOrder     Int           @default(0)
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  section       FooterSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  @@map("footer_links")
}

// Footer Company Info
model FooterCompanyInfo {
  id            String    @id @default(uuid())
  companyName   String
  logoUrl       String?
  description   String    @db.Text
  email         String?
  phone         String?
  address       String?
  socialLinks   String?   // JSON string of social media links
  copyrightText String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("footer_company_info")
}

// Features Section
model Feature {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  iconUrl     String?   // Icon image URL
  iconClass   String?   // CSS class for icon
  category    String?   // main_features, secondary_features, etc.
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("features")
}

// Content Management for dynamic text content
model PageContent {
  id          String    @id @default(uuid())
  pageName    String    // landing_page, about_page, etc.
  sectionName String    // hero_section, features_section, etc.
  key         String    // title, subtitle, description, etc.
  value       String    @db.Text
  dataType    String    @default("text") // text, html, json, image
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([pageName, sectionName, key])
  @@map("page_content")
}

model Card {
  id             String        @id @default(uuid())
  userId         String
  cardNumber     String        @unique
  cardHolderName String
  expiryDate     DateTime
  cardNetwork    String         // VISA, MASTERCARD, etc.
  cvv            String
  cardType       String
  cardForm       String
  currency       String
  status         String        @default("ACTIVE")
  balance        Decimal       @default(0) @db.Decimal(15, 2)
  creditLimit    Decimal?      @db.Decimal(15, 2)

  isDefault      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   Transaction[]

  @@map("cards")
}

model SubscriptionActivityLog {
  id             String   @id @default(uuid())
  userId         String
  subscriptionId String?
  action         String   // create, renew, cancel, change_plan, etc.
  statusCode     Int
  ipAddress      String?
  userAgent      String?
  metadata       String?  // JSON string for additional data
  createdAt      DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscription_activity_logs")
}

// Dynamic Translations System
  model Translation {
    id          String    @id @default(uuid())
    key         String    // e.g., "nav.home", "hero.title"
    valueEn     String    @db.Text // English translation
    valueAr     String    @db.Text // Arabic translation
    category    String?   // e.g., "navigation", "hero", "footer"
    description String?   // Description of what this translation is for
    isActive    Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    
    @@unique([key])
    @@map("translations")
  }