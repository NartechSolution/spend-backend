generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                       String                    @id @default(uuid())
  email                    String                    @unique
  password                 String
  firstName                String?
  lastName                 String?
  phone                    String?
  companyName              String?
  jobTitle                 String?
  companyIndustry          String?
  companySize              String?
  role                     String?                   @default("MEMBER")
  status                   String?                   @default("PENDING")
  isEmailVerified          Boolean                   @default(false)
  isPhoneVerified          Boolean                   @default(false)
  planType                 String?                   @default("FREE")
  subscriptionStatus       String?                   @default("TRIAL")
  firstSchoolName          String?
  petName                  String?
  birthPlace               String?
  elderBrotherName         String?
  grandfatherName          String?
  motherName               String?
  pinCode                  String?
  googleId                 String?
  facebookId               String?
  authProvider             String?
  verificationCode         String?
  resetToken               String?
  resetTokenExpiry         DateTime?
  lastLogin                DateTime?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  accounts                 Account[]
  cards                    Card[]
  investments              Investment[]
  invoices                 Invoice[]
  loans                    Loan[]
  payments                 Payment[]
  serviceRequests          ServiceRequest[]
  subscriptionActivityLogs SubscriptionActivityLog[]
  transactions             Transaction[]
  trialUsages              TrialUsage[]
  userSubscriptions        UserSubscription[]

  @@map("users")
}

model Service {
  id              String           @id @default(uuid())
  name            String           @unique
  displayName     String
  description     String
  serviceType     String
  category        String?
  features        String?
  metadata        String?
  icon            String?
  isActive        Boolean          @default(true)
  sortOrder       Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  createdBy       String?
  updatedBy       String?
  planServices    PlanService[]
  serviceRequests ServiceRequest[]

  @@map("services")
}

model PlanService {
  id         String           @id @default(uuid())
  planId     String
  serviceId  String
  isIncluded Boolean          @default(true)
  maxUsage   Int?
  metadata   String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  plan       SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  service    Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([planId, serviceId])
  @@map("plan_services")
}

model ServiceRequest {
  id              String           @id @default(uuid())
  userId          String
  subscriptionId  String
  serviceId       String
  status          String           @default("PENDING")
  reason          String?
  adminNotes      String?
  rejectionReason String?
  requestedAt     DateTime         @default(now())
  reviewedAt      DateTime?
  approvedBy      String?
  rejectedBy      String?
  service         Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  subscription    UserSubscription @relation(fields: [subscriptionId], references: [id], onUpdate: NoAction)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("service_requests")
}

model SubscriptionPlan {
  id                String             @id @default(uuid())
  name              String
  displayName       String
  type              String
  monthlyPrice      Decimal            @db.Decimal(15, 2)
  yearlyPrice       Decimal            @db.Decimal(15, 2)
  currency          String             @default("SAR")
  features          String
  trialDays         Int                @default(14)
  maxUsers          Int                @default(1)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  planServices      PlanService[]
  userSubscriptions UserSubscription[]

  @@map("subscription_plans")
}

model UserSubscription {
  id                   String                @id @default(uuid())
  userId               String
  planId               String
  billingCycle         String
  status               String                @default("ACTIVE")
  startDate            DateTime              @default(now())
  endDate              DateTime
  cancelledAt          DateTime?
  priceAtPurchase      Decimal               @db.Decimal(15, 2)
  paymentStatus        String                @default("PENDING")
  autoRenewal          Boolean               @default(true)
  metadata             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  payments             Payment[]
  renewalReminders     RenewalReminder[]
  serviceRequests      ServiceRequest[]
  subscriptionPayments SubscriptionPayment[]
  plan                 SubscriptionPlan      @relation(fields: [planId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_subscriptions")
}

model TrialUsage {
  id        String   @id @default(uuid())
  userId    String
  email     String
  planType  String
  usedAt    DateTime @default(now())
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, planType])
  @@map("trial_usage")
}

model RenewalReminder {
  id             String           @id @default(uuid())
  subscriptionId String
  reminderType   String
  scheduledAt    DateTime
  sentAt         DateTime?
  emailSent      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  subscription   UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("renewal_reminders")
}

model SubscriptionPayment {
  id              String           @id @default(uuid())
  subscriptionId  String
  amount          Decimal          @db.Decimal(15, 2)
  currency        String           @default("SAR")
  status          String           @default("PENDING")
  paymentMethod   String?
  stripePaymentId String?
  paidAt          DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  subscription    UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("subscription_payments")
}

model Payment {
  id             String           @id @default(uuid())
  userId         String
  subscriptionId String
  amount         Decimal          @db.Decimal(15, 2)
  paymentStatus  String           @default("PENDING")
  paymentProof   String?
  paymentMethod  String?
  cardHolderName String?
  cardLastFour   String?
  billingAddress String?
  declineReason  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  subscription   UserSubscription @relation(fields: [subscriptionId], references: [id], onUpdate: NoAction)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Subscription {
  id           String   @id @default(uuid())
  name         String
  type         String
  monthlyPrice Decimal  @db.Decimal(15, 2)
  yearlyPrice  Decimal? @db.Decimal(15, 2)
  currency     String   @default("SAR")
  billingCycle String
  features     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("subscriptions")
}

model Account {
  id                      String                  @id @default(uuid())
  userId                  String
  fullName                String
  routingNumber           String
  accountNumber           String                  @unique
  balance                 Decimal                 @default(0) @db.Decimal(15, 2)
  currency                String                  @default("SAR")
  isDefault               Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  accountBalanceHistories AccountBalanceHistory[]
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  receivedTransactions    Transaction[]           @relation("ReceiverAccount")
  sentTransactions        Transaction[]           @relation("SenderAccount")

  @@map("accounts")
}

model Transaction {
  id                String    @id @default(uuid())
  transactionId     String    @unique @default(uuid())
  userId            String
  senderAccountId   String?
  receiverAccountId String?
  cardId            String?
  type              String
  amount            Decimal   @db.Decimal(15, 2)
  fee               Decimal   @default(0) @db.Decimal(15, 2)
  description       String
  category          String?
  status            String    @default("PENDING")
  reference         String?
  metadata          String?
  processedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  card              Card?     @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  receiverAccount   Account?  @relation("ReceiverAccount", fields: [receiverAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  senderAccount     Account?  @relation("SenderAccount", fields: [senderAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Loan {
  id              String        @id @default(uuid())
  userId          String
  loanType        String
  amount          Decimal       @db.Decimal(15, 2)
  remainingAmount Decimal       @db.Decimal(15, 2)
  interestRate    Decimal       @db.Decimal(5, 2)
  duration        Int
  monthlyPayment  Decimal       @db.Decimal(15, 2)
  status          String        @default("PENDING")
  startDate       DateTime?
  endDate         DateTime?
  nextPaymentDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  loanPayments    LoanPayment[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model LoanPayment {
  id              String   @id @default(uuid())
  loanId          String
  amount          Decimal  @db.Decimal(15, 2)
  principalAmount Decimal  @db.Decimal(15, 2)
  interestAmount  Decimal  @db.Decimal(15, 2)
  paymentDate     DateTime
  createdAt       DateTime @default(now())
  loan            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("loan_payments")
}

model Investment {
  id           String    @id @default(uuid())
  userId       String
  name         String
  category     String
  amount       Decimal   @db.Decimal(15, 2)
  currentValue Decimal   @db.Decimal(15, 2)
  returnRate   Decimal   @db.Decimal(5, 2)
  status       String    @default("ACTIVE")
  startDate    DateTime
  maturityDate DateTime?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investments")
}

model Invoice {
  id             String    @id @default(uuid())
  userId         String
  invoiceNumber  String    @unique
  recipientName  String
  recipientEmail String?
  amount         Decimal   @db.Decimal(15, 2)
  description    String?
  status         String    @default("SENT")
  dueDate        DateTime?
  paidAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model AccountBalanceHistory {
  id        String   @id @default(uuid())
  accountId String
  balance   Decimal  @db.Decimal(15, 2)
  date      DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("account_balance_history")
}

model SystemSettings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model TrustIndicator {
  id          String   @id @default(uuid())
  companyName String
  logoUrl     String
  websiteUrl  String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("trust_indicators")
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String   @db.Text
  category  String?
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Statistic {
  id          String   @id @default(uuid())
  title       String
  description String
  icon        String?
  value       String
  category    String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("statistics")
}

model AppDownload {
  id              String   @id @default(uuid())
  title           String
  description     String   @db.Text
  androidUrl      String?
  iosUrl          String?
  androidLabel    String?
  iosLabel        String?
  backgroundImage String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("app_downloads")
}

model FooterSection {
  id          String       @id @default(uuid())
  sectionName String
  title       String
  sortOrder   Int          @default(0)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  footerLinks FooterLink[]

  @@map("footer_sections")
}

model FooterLink {
  id         String        @id @default(uuid())
  sectionId  String
  title      String
  url        String
  isExternal Boolean       @default(false)
  sortOrder  Int           @default(0)
  isActive   Boolean       @default(true)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  section    FooterSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("footer_links")
}

model FooterCompanyInfo {
  id            String   @id @default(uuid())
  companyName   String
  logoUrl       String?
  description   String   @db.Text
  email         String?
  phone         String?
  address       String?
  socialLinks   String?
  copyrightText String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("footer_company_info")
}

model Feature {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  iconUrl     String?
  iconClass   String?
  category    String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("features")
}

model PageContent {
  id          String   @id @default(uuid())
  pageName    String
  sectionName String
  key         String
  value       String   @db.Text
  dataType    String   @default("text")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([pageName, sectionName, key])
  @@map("page_content")
}

model Card {
  id             String        @id @default(uuid())
  userId         String
  cardNumber     String        @unique
  cardHolderName String
  expiryDate     DateTime
  cardNetwork    String
  cvv            String
  cardType       String
  cardForm       String
  currency       String
  status         String        @default("ACTIVE")
  balance        Decimal       @default(0) @db.Decimal(15, 2)
  creditLimit    Decimal?      @db.Decimal(15, 2)
  isDefault      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   Transaction[]

  @@map("cards")
}

model SubscriptionActivityLog {
  id             String   @id @default(uuid())
  userId         String
  subscriptionId String?
  action         String
  statusCode     Int
  ipAddress      String?
  userAgent      String?
  metadata       String?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription_activity_logs")
}

model Translation {
  id          String   @id @default(uuid())
  key         String   @unique @db.NVarChar(500)
  valueEn     String   @db.NVarChar(Max)
  valueAr     String   @db.NVarChar(Max)
  category    String?  @db.NVarChar(100)
  description String?  @db.NVarChar(1000)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("translations")
}

model TransactionExample {
  id        String   @id @default(uuid())
  name      String
  subtitle  String
  amount    String
  icon      String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transaction_examples")
}

model HeroStatistic {
  id        String   @id @default(uuid())
  value     String
  label     String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hero_statistics")
}

model SocialMediaLink {
  id        String   @id @default(uuid())
  platform  String
  url       String
  icon      String?
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("social_media_links")
}

model ContactInfo {
  id           String   @id @default("default")
  email        String?
  phone        String?
  address      String?
  workingHours String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("contact_info")
}

model TrustedCompany {
  id        String   @id @default(uuid())
  name      String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trusted_companies")
}
