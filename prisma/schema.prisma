generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id               String              @id @default(uuid())
  email            String              @unique
  password         String
  firstName        String
  lastName         String
  phone            String?
  companyName      String?
  jobTitle         String?
  companyIndustry  String?
  companySize      String?
  role             String              @default("MEMBER") // ADMIN, MEMBER, USER
  status           String              @default("PENDING")
  isEmailVerified  Boolean             @default(false)
  isPhoneVerified  Boolean             @default(false)

  verificationCode String?
  resetToken       String?
  resetTokenExpiry DateTime?
  lastLogin        DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  
  accounts         Account[]
  cards            Card[]
  investments      Investment[]
  invoices         Invoice[]
  loans            Loan[]
  payments         Payment[]
  transactions     Transaction[]
  
  userSubscriptions UserSubscription[]
  trialUsages      TrialUsage[]

  @@map("users")
}

model UserSubscription {
  id              String    @id @default(uuid())
  userId          String
  planId          String  // This should reference Subscription.id
  billingCycle    String    // MONTHLY, YEARLY
  status          String    @default("ACTIVE")
  startDate       DateTime  @default(now())
  endDate         DateTime
  cancelledAt     DateTime?
  trialUsed       Boolean   @default(false)
  autoRenewal     Boolean   @default(true)
  metadata        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            Subscription       @relation(fields: [planId], references: [id]) // Change from SubscriptionPlan to Subscription
  renewalReminders RenewalReminder[]
  
  @@map("user_subscriptions")
}
model TrialUsage {
  id              String    @id @default(uuid())
  userId          String
  email           String
  planType        String    // FREE, MEMBER, ADMIN
  usedAt          DateTime  @default(now())
  ipAddress       String?
  userAgent       String?
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([email, planType])
  @@map("trial_usage")
}

model RenewalReminder {
  id              String    @id @default(uuid())
  subscriptionId  String
  reminderType    String    // SEVEN_DAYS, THREE_DAYS, EXPIRED
  scheduledAt     DateTime
  sentAt          DateTime?
  emailSent       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  subscription    UserSubscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@map("renewal_reminders")
}

model Payment {
  id             String       @id @default(uuid())
  userId         String
  subscriptionId String
  amount         Decimal      @db.Decimal(15, 2)
  paymentStatus  String       @default("PENDING")
  paymentProof   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}
model Subscription {
  id          String    @id @default(uuid())
  name        String
  type        String
  monthlyPrice Decimal  @db.Decimal(15, 2)
  yearlyPrice  Decimal? @db.Decimal(15, 2)
  currency    String    @default("SAR")
  billingCycle String
  features    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  payments    Payment[]
  userSubscriptions UserSubscription[]  // Add this line
  
  @@map("subscriptions")
}


model Account {
  id                      String                  @id @default(uuid())
  userId                  String
  fullName                String
  routingNumber           String
  accountNumber           String                  @unique
  balance                 Decimal                 @default(0) @db.Decimal(15, 2)
  currency                String                  @default("SAR")
  isDefault               Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  accountBalanceHistories AccountBalanceHistory[]
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  receivedTransactions    Transaction[]           @relation("ReceiverAccount")
  sentTransactions        Transaction[]           @relation("SenderAccount")

  @@map("accounts")
}

model Transaction {
  id                String    @id @default(uuid())
  transactionId     String    @unique @default(uuid())
  userId            String
  senderAccountId   String?
  receiverAccountId String?
  cardId            String?
  type              String
  amount            Decimal   @db.Decimal(15, 2)
  fee               Decimal   @default(0) @db.Decimal(15, 2)
  description       String
  category          String?
  status            String    @default("PENDING")
  reference         String?
  metadata          String?
  processedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  card              Card?     @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  receiverAccount   Account?  @relation("ReceiverAccount", fields: [receiverAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  senderAccount     Account?  @relation("SenderAccount", fields: [senderAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Loan {
  id              String        @id @default(uuid())
  userId          String
  loanType        String
  amount          Decimal       @db.Decimal(15, 2)
  remainingAmount Decimal       @db.Decimal(15, 2)
  interestRate    Decimal       @db.Decimal(5, 2)
  duration        Int
  monthlyPayment  Decimal       @db.Decimal(15, 2)
  status          String        @default("PENDING")
  startDate       DateTime?
  endDate         DateTime?
  nextPaymentDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  loanPayments    LoanPayment[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model LoanPayment {
  id              String   @id @default(uuid())
  loanId          String
  amount          Decimal  @db.Decimal(15, 2)
  principalAmount Decimal  @db.Decimal(15, 2)
  interestAmount  Decimal  @db.Decimal(15, 2)
  paymentDate     DateTime
  createdAt       DateTime @default(now())
  loan            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("loan_payments")
}

model Investment {
  id           String    @id @default(uuid())
  userId       String
  name         String
  category     String
  amount       Decimal   @db.Decimal(15, 2)
  currentValue Decimal   @db.Decimal(15, 2)
  returnRate   Decimal   @db.Decimal(5, 2)
  status       String    @default("ACTIVE")
  startDate    DateTime
  maturityDate DateTime?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investments")
}

model Invoice {
  id             String    @id @default(uuid())
  userId         String
  invoiceNumber  String    @unique
  recipientName  String
  recipientEmail String?
  amount         Decimal   @db.Decimal(15, 2)
  description    String?
  status         String    @default("SENT")
  dueDate        DateTime?
  paidAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model AccountBalanceHistory {
  id        String   @id @default(uuid())
  accountId String
  balance   Decimal  @db.Decimal(15, 2)
  date      DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("account_balance_history")
}

model SystemSettings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model Card {
  id             String        @id @default(uuid())
  userId         String
  cardNumber     String        @unique
  cardHolderName String
  expiryDate     DateTime
  cardNetwork    String         // VISA, MASTERCARD, etc.
  cvv            String
  cardType       String
  cardForm       String
  currency       String
  status         String        @default("ACTIVE")
  balance        Decimal       @default(0) @db.Decimal(15, 2)
  creditLimit    Decimal?      @db.Decimal(15, 2)
  bank           String
  isDefault      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   Transaction[]

  @@map("cards")
}
