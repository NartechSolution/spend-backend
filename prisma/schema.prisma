generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Payment {
  id          String   @id @default(uuid())
  userId      String
  subscriptionId String
  amount      Decimal  @db.Decimal(15, 2)
  paymentStatus String   @default("PENDING") // PENDING, APPROVED, DECLINED
  paymentProof String?  // URL or path to the uploaded payment proof
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Subscription {
  id          String   @id @default(uuid())
  name        String
  type        String   // free, paid
  price       Decimal  @db.Decimal(15, 2)
  currency    String   @default("SAR")
  features    String   // Store features as JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  payments Payment[]

  @@map("subscriptions")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  firstName        String
  lastName         String
  phone            String?
  companyName      String?
  jobTitle         String?
  companyIndustry  String?
  companySize      String?
  role             String    @default("MEMBER") // ADMIN, MEMBER
  status           String    @default("PENDING") // ACTIVE, SUSPENDED, PENDING
  isEmailVerified  Boolean   @default(false)
  isPhoneVerified  Boolean   @default(false)
  verificationCode String?
  resetToken       String?
  resetTokenExpiry DateTime?
  lastLogin        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relationships
  accounts     Account[]
  cards        Card[]
  transactions Transaction[]
  loans        Loan[]
  investments  Investment[]
  invoices     Invoice[]
  payments     Payment[]

  @@map("users")
}

model Account {
  id            String   @id @default(uuid())
  userId        String
  fullName      String
  routingNumber String
  accountNumber String   @unique
  balance       Decimal  @default(0) @db.Decimal(15, 2)
  currency      String   @default("SAR")
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user                    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sentTransactions        Transaction[] @relation("SenderAccount")
  receivedTransactions    Transaction[] @relation("ReceiverAccount")
  accountBalanceHistories AccountBalanceHistory[]

  @@map("accounts")
}

model Card {
  id            String   @id @default(uuid())
  userId        String
  cardNumber    String   @unique
  cardHolderName String
  expiryDate    DateTime
  cvv           String
  cardType      String   // DEBIT, CREDIT, PREPAID
  status        String   @default("ACTIVE") // ACTIVE, BLOCKED, EXPIRED, CANCELLED
  balance       Decimal  @default(0) @db.Decimal(15, 2)
  creditLimit   Decimal? @db.Decimal(15, 2)
  bank          String
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("cards")
}

model Transaction {
  id              String   @id @default(uuid())
  transactionId   String   @unique @default(uuid())
  userId          String
  senderAccountId String?
  receiverAccountId String?
  cardId          String?
  type            String   // DEPOSIT, WITHDRAWAL, TRANSFER, PAYMENT, REFUND
  amount          Decimal  @db.Decimal(15, 2)
  fee             Decimal  @default(0) @db.Decimal(15, 2)
  description     String
  category        String?
  status          String   @default("PENDING") // PENDING, COMPLETED, FAILED, CANCELLED
  reference       String?
  metadata        String?  // Store JSON as string
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships - Fixed cyclic referential actions
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  senderAccount   Account? @relation("SenderAccount", fields: [senderAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  receiverAccount Account? @relation("ReceiverAccount", fields: [receiverAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  card            Card?    @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("transactions")
}

model Loan {
  id            String   @id @default(uuid())
  userId        String
  loanType      String   // Personal, Corporate, Business, Custom
  amount        Decimal  @db.Decimal(15, 2)
  remainingAmount Decimal @db.Decimal(15, 2)
  interestRate  Decimal  @db.Decimal(5, 2)
  duration      Int      // in months
  monthlyPayment Decimal @db.Decimal(15, 2)
  status        String   @default("PENDING") // ACTIVE, COMPLETED, DEFAULTED, PENDING
  startDate     DateTime?
  endDate       DateTime?
  nextPaymentDate DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  loanPayments LoanPayment[]

  @@map("loans")
}

model LoanPayment {
  id          String   @id @default(uuid())
  loanId      String
  amount      Decimal  @db.Decimal(15, 2)
  principalAmount Decimal @db.Decimal(15, 2)
  interestAmount  Decimal @db.Decimal(15, 2)
  paymentDate DateTime
  createdAt   DateTime @default(now())

  // Relationships
  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("loan_payments")
}

model Investment {
  id              String   @id @default(uuid())
  userId          String
  name            String
  category        String   // E-commerce, Marketplace, Electric Vehicles, etc.
  amount          Decimal  @db.Decimal(15, 2)
  currentValue    Decimal  @db.Decimal(15, 2)
  returnRate      Decimal  @db.Decimal(5, 2)
  status          String   @default("ACTIVE") // ACTIVE, MATURED, CANCELLED
  startDate       DateTime
  maturityDate    DateTime?
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investments")
}

model Invoice {
  id          String   @id @default(uuid())
  userId      String
  invoiceNumber String @unique
  recipientName String
  recipientEmail String?
  amount      Decimal  @db.Decimal(15, 2)
  description String?
  status      String   @default("SENT") // SENT, PAID, OVERDUE, CANCELLED
  dueDate     DateTime?
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model AccountBalanceHistory {
  id        String   @id @default(uuid())
  accountId String
  balance   Decimal  @db.Decimal(15, 2)
  date      DateTime @default(now())

  // Relationships
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("account_balance_history")
}

model SystemSettings {
  id    String @id @default(uuid())
  key   String @unique
  value String
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}